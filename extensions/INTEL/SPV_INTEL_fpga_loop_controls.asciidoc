SPV_INTEL_fpga_loop_controls
============================

== Name Strings

SPV_INTEL_fpga_loop_controls

== Contact

To report problems with this extension, please open a new issue at:

https://github.com/KhronosGroup/SPIRV-Headers

== Contributors

- Joe Garvey, Intel +
- Michael Kinsner, Intel

== Notice

Copyright (c) 2019 Intel Corporation.  All rights reserved.

== Status

Final draft

== Version

[width="40%",cols="25,25"]
|========================================
| Last Modified Date | {docdate}
| Revision           | D
|========================================

== Dependencies

This extension is written against the SPIR-V Specification,
Version 1.4 Revision 1.

This extension requires SPIR-V 1.0.

== Overview

This extension introduces additional loop controls for FPGA targets.

== Extension Name
To use this extension within a SPIR-V module, the following *OpExtension* must be present in the module:

----
OpExtension "SPV_INTEL_fpga_loop_controls"
----
 
== New capabilities
This extension introduces a new capability:

----
FPGALoopControlsINTEL
----

== Token Number Assignments

[width="40%"]
[cols="70%,30%"]
[grid="rows"]
|====
|FPGALoopControlsINTEL  |5888
|====

== Modifications to the SPIR-V Specification, Version 1.4

=== Loop Control
In section 3.23, Loop Control, add the following entries to the table:

|====
2+^| *Loop Control* | *Enabling Capabilities*
| 0x10000 | *InitiationIntervalINTEL* +
Strong request, to the extent possible, to implement this loop with an initiation interval specified as a subsequent literal-number operand to the instruction. | *FPGALoopControlsINTEL*
| 0x20000 | *MaxConcurrencyINTEL* +
Strong request, to the extent possible, to allow no more than a fixed number of threads or loop iterations to execute the loop concurrently as specified by a subsequent literal-number operand to the instruction. | *FPGALoopControlsINTEL*
| 0x40000 | *DependencyArrayINTEL* +
Guarantees that there are no dependencies on a particular variable between a number of loop iterations.  
Can be applied to multiple variables, the number of which is specified as a subsequent literal-number operand to the instruction. Following that, for each variable, an <id> and literal number pair are provided indicating the variable and number of loop iterations. A number of loop iterations of 0 indicates that there are no loop-carried dependences on that variable. | *FPGALoopControlsINTEL*
| 0x80000 | *ArrayInitializerINTEL* +
Indicates that this loop is a compiler-generated array initialization loop.  This can be useful for FPGA targets that wish to optimize these loops differently from other loops. | *FPGALoopControlsINTEL*
|====

=== Capability

Modify Section 3.31, Capability, adding a row to the Capability table:

[options="header"]
|=====
2+^| Capability ^| Implicitly Declares
| 5888 | FPGALoopControlsINTEL | 
|=====

=== Validation Rules

None.

== Issues

None.

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|A|2019-05-06|Joe Garvey|*Initial public release*
|B|2019-05-07|Michael Kinsner|Update overview wording
|C|2019-06-02|Michael Kinsner|Use loop control bits directly, as allocated in SPIRV-Headers spir-v.xml
|D|2019-07-17|Joe Garvey|Add ArrayInitializerINTEL
|======================================== 

