SPV_ALTERA_fpga_memory_accesses
===============================

== Name Strings

SPV_ALTERA_fpga_memory_accesses

== Contact

To report problems with this extension, please open a new issue at:

https://github.com/KhronosGroup/SPIRV-Registry

== Contributors

- Mohammad Fawaz, Intel +
- Joe Garvey, Intel +
- Michael Kinsner, Intel +
- Alexey Sotkin, Intel

== Notice

Copyright (c) 2020 Intel Corporation.  All rights reserved.

== Status

First draft

== Version

[width="40%",cols="25,25"]
|========================================
| Last Modified Date | 2020-02-20
| Revision           | 1
|========================================

== Dependencies

This extension is written against the SPIR-V Specification,
Version 1.5 Revision 2.

This extension requires SPIR-V 1.0.

== Overview

This extension adds decorations, useful for FPGA targets, that explicitly request that implementation of a memory access is configured in a certain way.

== Extension Name
To use this extension within a SPIR-V module, the following *OpExtension* must be present in the module:

----
OpExtension "SPV_ALTERA_fpga_memory_accesses"
----
 
== New capabilities
This extension introduces a new capability:

----
FPGAMemoryAccessesALTERA
----

== New Decorations

Decorations added under the *FPGAMemoryAccessesALTERA* capability:

----
BurstCoalesceALTERA
CacheSizeALTERA
DontStaticallyCoalesceALTERA
PrefetchALTERA
----

== Token Number Assignments

--
[width="40%"]
[cols="70%,30%"]
[grid="rows"]
|====
|FPGAMemoryAccessesALTERA     |5898
|BurstCoalesceALTERA          |5899
|CacheSizeALTERA              |5900
|DontStaticallyCoalesceALTERA |5901
|PrefetchALTERA               |5902
|==== 
--

== Modifications to the SPIR-V Specification, Version 1.5

=== Decoration

Modify Section 3.20, Decoration, adding these rows to the Decoration table:

--
[options="header"]
|====
2+^| Decoration 2+^| Extra Operands	^| Enabling Capabilities
| 5899 | *BurstCoalesceALTERA* +
Apply to a pointer. Request, to the extent possible, that a dynamic burst coalescer be implemented when the memory pointed to by the pointer is accessed using OpLoad or OpStore. 
2+| | *FPGAMemoryAccessesALTERA*
| 5900 | *CacheSizeALTERA* +
Apply to a pointer. Request, to the extent possible, that a read-only cache of the specified size be implemented when the memory pointed to by the pointer is accessed using OpLoad.
2+| Literal Number +
_Cache Size in bytes_ | *FPGAMemoryAccessesALTERA*
| 5901 | *DontStaticallyCoalesceALTERA*  +
Apply to a pointer. Request, to the extent possible, that accesses to the pointer, using OpLoad or OpStore, should not be statically coalesced with other memory accesses at compile time.
2+| | *FPGAMemoryAccessesALTERA*
| 5902 | *PrefetchALTERA* +
Apply to a pointer. Request, to the extent possible, that a prefetcher of the specified size be implemented when the memory pointed to by the pointer is accessed using OpLoad.
2+| Literal Number +
_Prefetcher Size in bytes_ | *FPGAMemoryAccessesALTERA*
|====
--

=== Capability

Modify Section 3.31, Capability, adding a row to the Capability table:
--
[options="header"]
|====
2+^| Capability ^| Implicitly Declares
| 5898 | FPGAMemoryAccessesALTERA |
|====
--

=== Validation Rules

None.

== Issues

None.

//. Issue.
//+
//--
//*RESOLVED*: Resolution.
//--

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1|2020-02-20|Mohammad Fawaz|*Initial public release*
|======================================== 
